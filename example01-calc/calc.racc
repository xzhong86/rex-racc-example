#

class Calculator

  prechigh
    nonassoc UMINUS
    left '*' '/'
    left '+' '-'
  preclow
  options no_result_var

rule
  exp
    : exp '+' exp       { val[0] + val[2] }
    | exp '-' exp       { val[0] - val[2] }
    | exp '*' exp       { val[0] * val[2] }
    | exp '/' exp       { val[0] / val[2] }
    | '(' exp ')'       { val[1] }
    | '-' DIGIT =UMINUS { -(val[1]) }
    | '-' FLOAT =UMINUS { -(val[1]) }
    | DIGIT | FLOAT

end


---- header ----

require_relative 'calc.rex'


---- inner ----

def parse(input)
  scan_str(input)
end


---- footer ----

def test_expr(calc, expr)
  begin
    res = calc.parse expr
    puts "`#{expr}'=#{res}"
  rescue
    puts "parsing: `#{expr}='"
    raise
  end
end

puts "test calc"
calc = Calculator.new
test_expr calc, "1+2"
test_expr calc, "1+2+3"
test_expr calc, "1 + 2+3"
test_expr calc, "1 + 2 * 3"
test_expr calc, "1 * 2 + 3"
test_expr calc, "2 * -3"
test_expr calc, "(1 + 2) * 3"
test_expr calc, "(1 + 2.3) * 3.1"
test_expr calc, "1+2+3 # comment"
test_expr calc, "1+2+3 # comment\n +1 #comment2\n + 4"
